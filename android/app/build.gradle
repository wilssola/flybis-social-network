def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new FileNotFoundException('Flutter SDK not found. Define location with flutter.sdk in the local.properties file.')
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def flutterMinSdkVersion = localProperties.getProperty('flutter.minSdkVersion')
if (flutterMinSdkVersion == null) {
    flutterMinSdkVersion = '24'
}

def flutterTargetSdkVersion = localProperties.getProperty('flutter.targetSdkVersion')
if (flutterTargetSdkVersion == null) {
    flutterTargetSdkVersion = '33'
}

def flutterCompileSdkVersion = localProperties.getProperty('flutter.compileSdkVersion')
if (flutterCompileSdkVersion == null) {
    flutterCompileSdkVersion = '33'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: '$flutterRoot/packages/flutter_tools/gradle/flutter.gradle'

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    packagingOptions {
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'

        pickFirst 'lib/x86/libavcodec.so'
        pickFirst 'lib/x86_64/libavcodec.so'
        pickFirst 'lib/armeabi-v7a/libavcodec.so'
        pickFirst 'lib/arm64-v8a/libavcodec.so'

        pickFirst 'lib/x86/libavformat.so'
        pickFirst 'lib/x86_64/libavformat.so'
        pickFirst 'lib/armeabi-v7a/libavformat.so'
        pickFirst 'lib/arm64-v8a/libavformat.so'

        pickFirst 'lib/x86/libavfilter.so'
        pickFirst 'lib/x86_64/libavfilter.so'
        pickFirst 'lib/armeabi-v7a/libavfilter.so'
        pickFirst 'lib/arm64-v8a/libavfilter.so'

        pickFirst 'lib/x86/libavutil.so'
        pickFirst 'lib/x86_64/libavutil.so'
        pickFirst 'lib/armeabi-v7a/libavutil.so'
        pickFirst 'lib/arm64-v8a/libavutil.so'

        pickFirst 'lib/x86/libswscale.so'
        pickFirst 'lib/x86_64/libswscale.so'
        pickFirst 'lib/armeabi-v7a/libswscale.so'
        pickFirst 'lib/arm64-v8a/libswscale.so'

        pickFirst 'lib/x86/libswresample.so'
        pickFirst 'lib/x86_64/libswresample.so'
        pickFirst 'lib/armeabi-v7a/libswresample.so'
        pickFirst 'lib/arm64-v8a/libswresample.so'

        pickFirst 'lib/x86/libavdevice.so'
        pickFirst 'lib/x86_64/libavdevice.so'
        pickFirst 'lib/armeabi-v7a/libavdevice.so'
        pickFirst 'lib/arm64-v8a/libavdevice.so'
    }
    
    compileSdkVersion flutterCompileSdkVersion.toInteger()

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // Specify your own unique Application ID, see: https://developer.android.com/studio/build/application-id.html.
        applicationId 'com.tecwolf.flybis'
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion flutterMinSdkVersion.toInteger()
        targetSdkVersion flutterTargetSdkVersion.toInteger()
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        multiDexEnabled true

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    
    buildTypes {
        release {
            signingConfig signingConfigs.release

            shrinkResources true
            minifyEnabled true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    buildToolsVersion '33.0.0'

    dependenciesInfo {
        includeInApk false
        includeInBundle false
    }
}

flutter {
    source '../..'
}

dependencies {    
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version'
    
    implementation 'com.android.support:multidex:1.0.3'    
    implementation 'com.google.android.ads.consent:consent-library:1.0.6'

    implementation 'com.arthenica:ffmpeg-kit-min-gpl:4.5.1-1'
    implementation 'com.arthenica:mobile-ffmpeg-min-gpl:4.4'
    
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    
    testImplementation 'junit:junit:4.13.2'
}

ext.flutterFFmpegPackage = 'min-gpl-lts'