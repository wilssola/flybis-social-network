service cloud.firestore {
  match /databases/{database}/documents {
    
    match /feed/{userId} {
			allow read: if request.auth.uid == userId;
      allow write: if request.auth.uid != null && request.auth.uid == request.resource.data.uid && (request.resource.data.type == 'like' || request.resource.data.type == 'follow' || request.resource.data.type == 'friend' || request.resource.data.type == 'comment' || request.resource.data.type == 'message') && (request.resource.data.contentType == null || request.resource.data.contentType == 'text' || request.resource.data.contentType == 'image' || request.resource.data.contentType == 'video' || request.resource.data.contentType == 'gif');
    }
    
    match /posts/{userId} {
			allow read;
      allow write: if request.auth.uid == userId;
    }
    
    match /timeline/{userId} {
			allow read: if request.auth.uid == userId;
    }
    
    match /followers/{userId}/userFollowers/{followerId} {
			allow read;
      allow write: if request.auth.uid != userId && request.auth.uid == followerId && userId != followerId;
    }
    
    match /following/{userId}/userFollowing/{followingId} {
			allow read;
      allow write: if request.auth.uid == userId && userId != followingId;
    }
    
    match /friends/{userId}/userRequests/{requesterId} {
			allow read;
      allow write: if request.auth.uid == userId || request.auth.uid == requesterId && userId != requesterId;
    }
    
    match /friends/{userId}/userFriends/{friendId} {
			allow read;
      allow write: if request.auth.uid == userId || (request.auth.uid == friendId && (exists(/databases/$(database)/documents/friends/$(userId)/userFriends/$(friendId)) || exists(/databases/$(database)/documents/friends/$(userId)/userRequests/$(friendId)))) && userId != friendId;
    }
    
    match /users/{userId} {
			allow read;
      allow create: if request.auth.uid != null && isUsernameAvailable(request.resource.data.username);
      allow update: if (request.auth.uid == userId && request.resource.data.username == resource.data.username); //|| (request.auth.uid == userId && isUsernameAvailable(request.resource.data.username));      
    }

    match /usernames/{username} {
      allow get: if isValidUsername(username);
      allow create;
    }  
     
    match /{document=**} {
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null;
    }
    
    function isValidUsername(username){
      return username.matches('^([a-zA-Z0-9_.]){5,15}$');
    }

    function isUsernameAvailable(username){
      return isValidUsername(username) && !exists(/databases/$(database)/documents/usernames/$(username));
    }    
  }
}